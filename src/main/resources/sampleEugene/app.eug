//COMMON PARTS AND PROPERTIES
Property name(txt);
Property SO(txt);

PartType Promoter(name, SO);
PartType Ribozyme(name, SO);
PartType RBS(name, SO);
PartType CDS(name, SO);
PartType Terminator(name, SO);
CDS g1(.SEQUENCE("GTGTTCTACAGAGAGAAGCGTAGAGCAATAGGCTGTATTTTGAGAAAGCTGTGTGAGTGGAAAAGTGTATAA"), .name("gene_gene1"), .SO("SO_0000316"));
CDS g2(.SEQUENCE("ATGAAACTCTACAATTTGAAAGATCACAATGAGCAGGTCAGCTTTGCGCAAGCCGTAACCCAGGGGTTGTGA"), .name("gene_gene2"), .SO("SO_0000316"));
CDS g3(.SEQUENCE("ATGGCTAAGCAAGATTATTACGAGATTTTAGGCGTTTCCAAAACAGCGGAAGAGCGTGAAATCAAAAAGTAA"), .name("gene_gene3"), .SO("SO_0000316"));
num N = 3;
Promoter p1(.SEQUENCE("ATCGTAGCTAGCTAGCTA"), .name("p_pBla"), .SO("SO_0000167"));
Promoter p2(.SEQUENCE("ATGCGATCGATCGATCG"), .name("p_pT7"), .SO("SO_0000167"));
Ribozyme ri1(.SEQUENCE("ATGATCGATCGATCGGCTAGCTA"), .name("ri_ri1"), .SO("SO_0000627"), .PIGEON("z ri 13"));
RBS rbs1(.SEQUENCE("ATGCTAGCTGATCGTA"), .name("RBS_RBS_1"), .SO("SO_0000139"));
Terminator t1(.SEQUENCE("ATCGATCGATCGATCGAT"), .name("t_t1"), .SO("SO_0000141"));
// Ribozyme (TRUE is with; FALSE is without); Default is TRUE.
boolean riboz = false;
//==========================================

Device Monocistronic_prgt();
Rule r1(on Monocistronic_prgt: ALL_FORWARD);

for(num i=1; i<=N; i=i+1) {
  if(riboz == false) {
  	Monocistronic_prgt = Monocistronic_prgt + Promoter + RBS + CDS + Terminator;
  } else {
   Monocistronic_prgt = Monocistronic_prgt + Promoter + Ribozyme + RBS + CDS + Terminator;
  }
  Promoter${"p"+i};
  Ribozyme${"ri"+i};
  RBS${"rbs"+i};
  CDS${"g"+i};
  AND(r1, ${"g"+i} EXACTLY 1);
  if(i>=2) {
    AND(r1, ${"g"+(i-1)} BEFORE ${"g"+i});
  }
  Terminator${"t"+i};
}

Device Monocistronic_pgt();
Rule r2(on Monocistronic_pgt: ALL_FORWARD);
for(num i=1; i<=N; i=i+1) {
  if(riboz == false) {
  	Monocistronic_pgt = Monocistronic_pgt + Promoter + CDS + Terminator;
  } else {
    Monocistronic_pgt = Monocistronic_pgt + Promoter + Ribozyme + CDS + Terminator;
  }
  Promoter${"p" + i};
  Ribozyme${"ri"+i};
  CDS${"g"+i}; AND(r2, ${"g"+i} EXACTLY 1);
  if(i>=2) {
    AND(r2, ${"g"+(i-1)} BEFORE ${"g"+i});
  }
  Terminator${"t"+i};
}
Device Polycistronic(Promoter);
Rule R(on Polycistronic: ALL_FORWARD);
for(num i=1; i<=N; i=i+1) {
if (i == 10 || i == 20 || i == 30 || i == 40 || i == 50 || i == 60 || i == 70) {
Polycistronic = Polycistronic + RBS + CDS + Promoter;
CDS${"g"+i}; AND(R, ${"g"+i} EXACTLY 1);
RBS${"rbs" + i};
Promoter${"p"+i};
} else {
Polycistronic = Polycistronic + RBS + CDS;
         RBS${"rbs" + i};
         CDS${"g"+i}; AND(R, ${"g"+i} EXACTLY 1);
      }
   if(i>=2) {
     AND(R, ${"g"+(i-1)} BEFORE ${"g"+i});
   }
 }
   Polycistronic = Polycistronic + Terminator;
 lod = product(Monocistronic_prgt);

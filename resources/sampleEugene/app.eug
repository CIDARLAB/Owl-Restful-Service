//==========================================
// Input-dependent
// N is number of gene entries
num N = 2;
// Rybozyme (TRUE is with; FALSE is without); Default is TRUE.
boolean rybozyme = true;
//==========================================
//==========================================

// Define partTypes.
include "./common.h";
// PART LIBRARY
include "./promoter_library.eug";
include "./insulator_library.eug";
include "./RBS_library.eug";
include "./gene_library.eug";
include "./terminator_library.eug";

Device Exhaustive();
Rule r1(on Exhaustive: ALL_FORWARD);

//this example is for 3 genes:


for(num i=1; i<=N; i=i+1) {
  if(rybozyme == false) {
  	Exhaustive = Exhaustive + Promoter + RBS + CDS + Terminator;
  } else {
    Exhaustive = Exhaustive + Promoter + Insulator + RBS + CDS + Terminator;
  }
  Promoter${"p"+i};
  Insulator${"ri"+i};
  RBS${"rbs"+i};
  CDS${"g"+i};
  AND(r1, ${"g"+i} EXACTLY 1);
  Terminator${"t"+i};
}

lod = product(Exhaustive);
//for (num i=0; i<sizeof(lod); i=i+1) {
//  println(sequence_of(lod[i]));
//}

println("The number of all possible devices: " + SIZEOF(lod));
println(lod);
SBOL.visualize(lod[0]);
